{"version":3,"sources":["components/CellItem.js","components/ColumnLine.js","components/Prealoader.js","components/RescueWindow.js","components/EndGame.js","App.js","index.js"],"names":["CellItem","_ref","onClick","cell","className","react_default","a","createElement","figure","src","concat","alt","ColumnLine","column","selectedFigure","map","components_CellItem","key","index","classnames","black","bg","red","x","y","yellow","highlighted","Prealoader","_useState","useState","_useState2","Object","slicedToArray","readyToPlay","setReadyToPlay","setTimeout","Fragment","RescueWindow","turn","whitesDead","blacksDead","title","EndGame","winner","playAgain","App","state","board","showRescueWindow","componentWillMount","_this","initBoard","initFigures","selectCell","_this$state","indexOf","clearTable","setState","pawnBlack","pawnWhite","rock","horse","bishop","queen","king","_this$state2","victim","push","length","wipeTheBoard","rescueFigure","_this$state3","splice","this","row","forEach","columns","doesCellExist","_this$state4","doesCellEmpty","doesEnemyAtCell","i","_this2","value","_this3","_this4","_this$state5","components_Prealoader","components_RescueWindow","components_EndGame","columnIndex","components_ColumnLine","Component","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.5cb9eebd.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst CellItem = ({ onClick, cell, className }) => (\r\n  <div className={className} onClick={onClick}>\r\n    {cell.figure ? (\r\n      <img src={`images/${cell.figure}.png`} alt=\"figure\" />\r\n    ) : null}\r\n  </div>\r\n);\r\n\r\nexport default CellItem;\r\n","import React from \"react\";\r\nimport classnames from \"classnames\";\r\nimport CellItem from \"./CellItem\";\r\n\r\nconst ColumnLine = ({ column, selectedFigure, onClick }) => (\r\n  <section>\r\n    {column.map(cell => (\r\n      <CellItem\r\n        key={cell.index}\r\n        className={classnames(\r\n          { black: cell.bg === \"#333\" },\r\n          {\r\n            red: selectedFigure.x === cell.x && selectedFigure.y === cell.y\r\n          },\r\n          { yellow: cell.highlighted }\r\n        )}\r\n        onClick={() => onClick(cell.x, cell.y, cell.figure)}\r\n        cell={cell}\r\n      />\r\n    ))}\r\n  </section>\r\n);\r\n\r\nexport default ColumnLine;\r\n","import React, { useState } from \"react\";\r\n\r\nconst Prealoader = () => {\r\n  const [readyToPlay, setReadyToPlay] = useState(false);\r\n\r\n  setTimeout(() => setReadyToPlay(true), 7000);\r\n\r\n  return (\r\n    <>\r\n      {readyToPlay ? null : (\r\n        <div className=\"Prealoader\">\r\n          <div className=\"content\">\r\n            <img src=\"images/mobile-icon.png\" className=\"logo\" alt=\"horse\" />\r\n            <p className=\"author\">\r\n              Author: <em>Alexander Vashchuk</em>\r\n            </p>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Prealoader;\r\n","import React from \"react\";\r\n\r\nconst RescueWindow = ({\r\n  turn,\r\n  whitesDead,\r\n  blacksDead,\r\n  selectedFigure,\r\n  onClick\r\n}) => (\r\n  <div className=\"RescueWindow\">\r\n    <div className=\"content\">\r\n      <h1>Pick up a figure to rescue:</h1>\r\n      <div className=\"list-of-figures\">\r\n        {turn === \"white\" ? (\r\n          <>\r\n            {whitesDead.map((figure, index) => (\r\n              <section\r\n                key={index}\r\n                onClick={() =>\r\n                  onClick(selectedFigure.x, selectedFigure.y, figure)\r\n                }\r\n              >\r\n                <img\r\n                  title=\"Rescue this figure\"\r\n                  src={`images/${figure}.png`}\r\n                  alt=\"figure\"\r\n                />\r\n              </section>\r\n            ))}\r\n          </>\r\n        ) : (\r\n          <>\r\n            {blacksDead.map((figure, index) => (\r\n              <section\r\n                key={index}\r\n                onClick={() =>\r\n                  onClick(selectedFigure.x, selectedFigure.y, figure)\r\n                }\r\n              >\r\n                <img\r\n                  title=\"Rescue this figure\"\r\n                  src={`images/${figure}.png`}\r\n                  alt=\"figure\"\r\n                />\r\n              </section>\r\n            ))}\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default RescueWindow;\r\n","import React from \"react\";\r\n\r\nconst EndGame = ({ winner, playAgain }) => (\r\n  <div className=\"End-Game\">\r\n    <div className=\"content\">\r\n      <div className=\"end-game-text\">\r\n        {winner} Team Won:\r\n        <p className=\"small\">click down bellow to play again</p>\r\n      </div>\r\n      <button onClick={() => playAgain()} className=\"play-again-button\">\r\n        Play Again\r\n      </button>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default EndGame;\r\n","import React, { Component } from \"react\";\r\nimport \"./scss/main.css\";\r\n\r\nimport ColumnLine from \"./components/ColumnLine\";\r\nimport Prealoader from \"./components/Prealoader\";\r\nimport RescueWindow from \"./components/RescueWindow\";\r\nimport EndGame from \"./components/EndGame\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    board: [],\r\n    turn: \"white\",\r\n    selectedFigure: { x: null, y: null },\r\n    winner: null,\r\n    showRescueWindow: false,\r\n    whitesDead: [],\r\n    blacksDead: []\r\n  };\r\n\r\n  wipeTheBoard() {\r\n    let { board } = this.state;\r\n\r\n    board.map(column => column.map(row => (row.figure = \"\")));\r\n\r\n    this.setState({ board });\r\n  }\r\n\r\n  initBoard() {\r\n    // Initialization of the board\r\n    let { board } = this.state;\r\n    for (let x = 0; x < 8; x++) {\r\n      let row = [];\r\n      for (let y = 0; y < 8; y++) {\r\n        let index = x * 8 + y;\r\n        let bg = (x + y) % 2 ? \"#333\" : \"white\";\r\n        row.push({ x, y, index, bg, figure: \"\", highlighted: false });\r\n      }\r\n      board.push(row);\r\n    }\r\n    this.setState({ board });\r\n  }\r\n\r\n  initFigures() {\r\n    // Initialization of the figures\r\n    let { board } = this.state;\r\n    let figures = [\r\n      \"rock\",\r\n      \"horse\",\r\n      \"bishop\",\r\n      \"queen\",\r\n      \"king\",\r\n      \"bishop\",\r\n      \"horse\",\r\n      \"rock\"\r\n    ];\r\n    figures.forEach((figure, index) => {\r\n      board[index][1].figure = \"pawn-black\";\r\n      board[index][6].figure = \"pawn-white\";\r\n      board[index][0].figure = figure + \"-black\";\r\n      board[index][7].figure = figure + \"-white\";\r\n    });\r\n    this.setState({ board });\r\n  }\r\n\r\n  componentWillMount = () => {\r\n    this.initBoard();\r\n    this.initFigures();\r\n  };\r\n\r\n  clearTable() {\r\n    let { board } = this.state;\r\n    board.map(columns => columns.map(cell => (cell.highlighted = false)));\r\n    this.setState({ board });\r\n  }\r\n\r\n  doesCellExist(x, y) {\r\n    if (x >= 0 && x <= 7 && y >= 0 && y <= 7) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  doesCellEmpty(x, y) {\r\n    const { board } = this.state;\r\n    if (this.doesCellExist(x, y)) {\r\n      if (board[x][y].figure === \"\") {\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  doesEnemyAtCell(x, y) {\r\n    const { board, turn } = this.state;\r\n    if (this.doesCellExist(x, y) && !this.doesCellEmpty(x, y)) {\r\n      if (board[x][y].figure.indexOf(turn) <= 0) {\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  pawnWhite(x, y) {\r\n    let { board } = this.state;\r\n\r\n    if (this.doesCellEmpty(x, y - 1)) {\r\n      board[x][y - 1].highlighted = true;\r\n      if (y === 6 && this.doesCellEmpty(x, y - 2)) {\r\n        board[x][y - 2].highlighted = true;\r\n      }\r\n    }\r\n    if (this.doesEnemyAtCell(x - 1, y - 1)) {\r\n      board[x - 1][y - 1].highlighted = true;\r\n    }\r\n    if (this.doesEnemyAtCell(x + 1, y - 1)) {\r\n      board[x + 1][y - 1].highlighted = true;\r\n    }\r\n\r\n    this.setState({ board });\r\n  }\r\n  pawnBlack(x, y) {\r\n    let { board } = this.state;\r\n\r\n    if (this.doesCellEmpty(x, y + 1)) {\r\n      board[x][y + 1].highlighted = true;\r\n      if (y === 1 && this.doesCellEmpty(x, y + 2)) {\r\n        board[x][y + 2].highlighted = true;\r\n      }\r\n    }\r\n    if (this.doesEnemyAtCell(x - 1, y + 1)) {\r\n      board[x - 1][y + 1].highlighted = true;\r\n    }\r\n    if (this.doesEnemyAtCell(x + 1, y + 1)) {\r\n      board[x + 1][y + 1].highlighted = true;\r\n    }\r\n\r\n    this.setState({ board });\r\n  }\r\n  rock(x, y) {\r\n    const { board } = this.state;\r\n\r\n    let i;\r\n\r\n    // Move To Top\r\n    i = 1;\r\n    while (i <= 7) {\r\n      if (this.doesCellEmpty(x, y - i)) {\r\n        board[x][y - i].highlighted = true;\r\n      } else if (this.doesEnemyAtCell(x, y - i)) {\r\n        board[x][y - i].highlighted = true;\r\n        break;\r\n      } else {\r\n        break;\r\n      }\r\n      i++;\r\n    }\r\n\r\n    // Move To Bottom\r\n    i = 1;\r\n    while (i <= 7) {\r\n      if (this.doesCellEmpty(x, y + i)) {\r\n        board[x][y + i].highlighted = true;\r\n      } else if (this.doesEnemyAtCell(x, y + i)) {\r\n        board[x][y + i].highlighted = true;\r\n        break;\r\n      } else {\r\n        break;\r\n      }\r\n      i++;\r\n    }\r\n\r\n    // Move To Left\r\n    i = 1;\r\n    while (i <= 7) {\r\n      if (this.doesCellEmpty(x - i, y)) {\r\n        board[x - i][y].highlighted = true;\r\n      } else if (this.doesEnemyAtCell(x - i, y)) {\r\n        board[x - i][y].highlighted = true;\r\n        break;\r\n      } else {\r\n        break;\r\n      }\r\n      i++;\r\n    }\r\n\r\n    // Move To Rigth\r\n    i = 1;\r\n    while (i <= 7) {\r\n      if (this.doesCellEmpty(x + i, y)) {\r\n        board[x + i][y].highlighted = true;\r\n      } else if (this.doesEnemyAtCell(x + i, y)) {\r\n        board[x + i][y].highlighted = true;\r\n        break;\r\n      } else {\r\n        break;\r\n      }\r\n      i++;\r\n    }\r\n\r\n    this.setState({ board });\r\n  }\r\n  horse(x, y) {\r\n    const { board } = this.state;\r\n    const values = [\r\n      { x: x - 2, y: y - 1 },\r\n      { x: x + 2, y: y - 1 },\r\n      { x: x - 2, y: y + 1 },\r\n      { x: x + 2, y: y + 1 },\r\n      { x: x - 1, y: y - 2 },\r\n      { x: x + 1, y: y - 2 },\r\n      { x: x - 1, y: y + 2 },\r\n      { x: x + 1, y: y + 2 }\r\n    ];\r\n\r\n    values.forEach(value => {\r\n      if (\r\n        this.doesCellEmpty(value.x, value.y) ||\r\n        this.doesEnemyAtCell(value.x, value.y)\r\n      ) {\r\n        board[value.x][value.y].highlighted = true;\r\n      }\r\n    });\r\n    this.setState({ board });\r\n  }\r\n  bishop(x, y) {\r\n    const { board } = this.state;\r\n\r\n    let i;\r\n\r\n    // Move To Top Left\r\n    i = 1;\r\n    while (i <= 7) {\r\n      if (this.doesCellEmpty(x - i, y - i)) {\r\n        board[x - i][y - i].highlighted = true;\r\n      } else if (this.doesEnemyAtCell(x - i, y - i)) {\r\n        board[x - i][y - i].highlighted = true;\r\n        break;\r\n      } else {\r\n        break;\r\n      }\r\n      i++;\r\n    }\r\n\r\n    // Move To Top Right\r\n    i = 1;\r\n    while (i <= 7) {\r\n      if (this.doesCellEmpty(x + i, y - i)) {\r\n        board[x + i][y - i].highlighted = true;\r\n      } else if (this.doesEnemyAtCell(x + i, y - i)) {\r\n        board[x + i][y - i].highlighted = true;\r\n        break;\r\n      } else {\r\n        break;\r\n      }\r\n      i++;\r\n    }\r\n\r\n    // Move To Bottom Left\r\n    i = 1;\r\n    while (i <= 7) {\r\n      if (this.doesCellEmpty(x - i, y + i)) {\r\n        board[x - i][y + i].highlighted = true;\r\n      } else if (this.doesEnemyAtCell(x - i, y + i)) {\r\n        board[x - i][y + i].highlighted = true;\r\n        break;\r\n      } else {\r\n        break;\r\n      }\r\n      i++;\r\n    }\r\n\r\n    // Move To Bottom Right\r\n    i = 1;\r\n    while (i <= 7) {\r\n      if (this.doesCellEmpty(x + i, y + i)) {\r\n        board[x + i][y + i].highlighted = true;\r\n      } else if (this.doesEnemyAtCell(x + i, y + i)) {\r\n        board[x + i][y + i].highlighted = true;\r\n        break;\r\n      } else {\r\n        break;\r\n      }\r\n      i++;\r\n    }\r\n\r\n    this.setState({ board });\r\n  }\r\n  queen(x, y) {\r\n    this.rock(x, y);\r\n    this.bishop(x, y);\r\n  }\r\n  king(x, y) {\r\n    let { board } = this.state;\r\n\r\n    const values = [\r\n      { x: x - 1, y: y - 1 },\r\n      { x: x, y: y - 1 },\r\n      { x: x + 1, y: y - 1 },\r\n      { x: x + 1, y: y },\r\n      { x: x + 1, y: y + 1 },\r\n      { x: x, y: y + 1 },\r\n      { x: x - 1, y: y + 1 },\r\n      { x: x - 1, y: y }\r\n    ];\r\n\r\n    values.forEach(value => {\r\n      if (\r\n        this.doesCellEmpty(value.x, value.y) ||\r\n        this.doesEnemyAtCell(value.x, value.y)\r\n      ) {\r\n        board[value.x][value.y].highlighted = true;\r\n      }\r\n    });\r\n\r\n    this.setState({ board });\r\n  }\r\n\r\n  selectCell = (x, y, figure) => {\r\n    let { board, selectedFigure, turn, whitesDead, blacksDead } = this.state;\r\n    if (figure && figure.indexOf(turn) >= 0) {\r\n      selectedFigure.x = x;\r\n      selectedFigure.y = y;\r\n      this.clearTable();\r\n      this.setState({ selectedFigure });\r\n      if (figure.indexOf(\"pawn-black\") >= 0) {\r\n        this.pawnBlack(x, y);\r\n      }\r\n      if (figure.indexOf(\"pawn-white\") >= 0) {\r\n        this.pawnWhite(x, y);\r\n      }\r\n      if (figure.indexOf(\"rock\") >= 0) {\r\n        this.rock(x, y);\r\n      }\r\n      if (figure.indexOf(\"horse\") >= 0) {\r\n        this.horse(x, y);\r\n      }\r\n      if (figure.indexOf(\"bishop\") >= 0) {\r\n        this.bishop(x, y);\r\n      }\r\n      if (figure.indexOf(\"queen\") >= 0) {\r\n        this.queen(x, y);\r\n      }\r\n      if (figure.indexOf(\"king\") >= 0) {\r\n        this.king(x, y);\r\n      }\r\n    }\r\n    // Clicked cell\r\n    if (board[x][y].highlighted) {\r\n      if (board[x][y].figure !== \"\") {\r\n        if (board[x][y].figure.indexOf(\"pawn\") !== 0) {\r\n          let { whitesDead, blacksDead } = this.state;\r\n          let victim = board[x][y].figure;\r\n          if (board[x][y].figure.indexOf(\"white\") >= 0) {\r\n            whitesDead.push(victim);\r\n            this.setState({ whitesDead });\r\n          } else {\r\n            blacksDead.push(victim);\r\n            this.setState({ blacksDead });\r\n          }\r\n        }\r\n      }\r\n\r\n      if (board[x][y].figure === \"king-black\") {\r\n        this.setState({ winner: \"White\" });\r\n      }\r\n      if (board[x][y].figure === \"king-white\") {\r\n        this.setState({ winner: \"Black\" });\r\n      }\r\n      turn = turn === \"white\" ? \"black\" : \"white\"; // change turn after the move\r\n      board[x][y].figure = board[selectedFigure.x][selectedFigure.y].figure;\r\n      board[selectedFigure.x][selectedFigure.y].figure = \"\";\r\n\r\n      // White pawn reached the end of the board\r\n      if (\r\n        board[x][y].figure.indexOf(\"pawn-white\") >= 0 &&\r\n        board[x][y].y === 0 &&\r\n        whitesDead.length > 0\r\n      ) {\r\n        this.setState({ showRescueWindow: true, selectedFigure: { x, y } });\r\n        this.clearTable();\r\n        return;\r\n      }\r\n\r\n      // Black pawn reached the end of the board\r\n      if (\r\n        board[x][y].figure.indexOf(\"pawn-black\") >= 0 &&\r\n        board[x][y].y === 7 &&\r\n        blacksDead.length > 0\r\n      ) {\r\n        this.setState({ showRescueWindow: true, selectedFigure: { x, y } });\r\n        this.clearTable();\r\n        return;\r\n      }\r\n\r\n      this.clearTable();\r\n      this.setState({ turn, board, selectedFigure: { x: null, y: null } });\r\n    }\r\n  };\r\n\r\n  playAgain = () => {\r\n    this.wipeTheBoard();\r\n    this.initFigures();\r\n    this.setState({\r\n      winner: null,\r\n      turn: \"white\",\r\n      whitesDead: [],\r\n      blacksDead: []\r\n    });\r\n  };\r\n\r\n  rescueFigure = (x, y, figure) => {\r\n    let { board, selectedFigure, turn, whitesDead, blacksDead } = this.state;\r\n\r\n    board[selectedFigure.x][selectedFigure.y].figure = figure;\r\n\r\n    // Removing the figure from the dead list after the rescuing\r\n    if (turn === \"white\") {\r\n      whitesDead.splice(whitesDead.indexOf(figure), 1);\r\n    } else {\r\n      blacksDead.splice(blacksDead.indexOf(figure), 1);\r\n    }\r\n\r\n    turn = turn === \"white\" ? \"black\" : \"white\"; // change turn after the rescuing\r\n\r\n    this.setState({\r\n      showRescueWindow: false,\r\n      board,\r\n      selectedFigure: { x: null, y: null },\r\n      turn,\r\n      whitesDead,\r\n      blacksDead\r\n    });\r\n  };\r\n\r\n  render() {\r\n    let {\r\n      turn,\r\n      board,\r\n      selectedFigure,\r\n      winner,\r\n      showRescueWindow,\r\n      whitesDead,\r\n      blacksDead\r\n    } = this.state;\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <Prealoader />\r\n        {showRescueWindow ? (\r\n          <RescueWindow\r\n            turn={turn}\r\n            whitesDead={whitesDead}\r\n            blacksDead={blacksDead}\r\n            onClick={this.rescueFigure}\r\n            selectedFigure={selectedFigure}\r\n          />\r\n        ) : null}\r\n        {winner ? <EndGame winner={winner} playAgain={this.playAgain} /> : null}\r\n        <div className=\"grid\">\r\n          {board.map((column, columnIndex) => (\r\n            <ColumnLine\r\n              key={columnIndex}\r\n              column={column}\r\n              selectedFigure={selectedFigure}\r\n              onClick={this.selectCell}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}