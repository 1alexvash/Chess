{"version":3,"sources":["components/CellItem.js","components/ColumnLine.js","components/Prealoader.js","components/RescueWindow.js","components/EndGame.js","App.js","index.js"],"names":["CellItem","_ref","onClick","cell","className","react_default","a","createElement","figure","src","concat","alt","ColumnLine","column","selectedFigure","map","components_CellItem","key","index","classnames","black","bg","red","x","y","yellow","highlighted","Prealoader","_useState","useState","_useState2","Object","slicedToArray","readyToPlay","setReadyToPlay","setTimeout","Fragment","RescueWindow","turn","whitesDead","blacksDead","title","EndGame","winner","playAgain","App","state","board","showRescueWindow","componentWillMount","_this","initBoard","initFigures","selectCell","_this$state","indexOf","clearTable","setState","pawnBlack","pawnWhite","rock","horse","bishop","queen","king","_this$state2","victim","push","alert","length","wipeTheBoard","rescueFigure","_this$state3","splice","this","row","forEach","columns","doesCellExist","_this$state4","doesCellEmpty","doesEnemyAtCell","i","_this2","value","_this3","_this4","_this$state5","components_Prealoader","components_RescueWindow","components_EndGame","columnIndex","components_ColumnLine","Component","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.1893638d.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst CellItem = ({ onClick, cell, className }) => (\r\n  <div className={className} onClick={onClick}>\r\n    {cell.figure ? (\r\n      <img src={`images/${cell.figure}.png`} alt=\"figure\" />\r\n    ) : null}\r\n  </div>\r\n);\r\n\r\nexport default CellItem;\r\n","import React from \"react\";\r\nimport classnames from \"classnames\";\r\nimport CellItem from \"./CellItem\";\r\n\r\nconst ColumnLine = ({ column, selectedFigure, onClick }) => (\r\n  <section>\r\n    {column.map(cell => (\r\n      <CellItem\r\n        key={cell.index}\r\n        className={classnames(\r\n          { black: cell.bg === \"#333\" },\r\n          {\r\n            red: selectedFigure.x === cell.x && selectedFigure.y === cell.y\r\n          },\r\n          { yellow: cell.highlighted }\r\n        )}\r\n        onClick={() => onClick(cell.x, cell.y, cell.figure)}\r\n        cell={cell}\r\n      />\r\n    ))}\r\n  </section>\r\n);\r\n\r\nexport default ColumnLine;\r\n","import React, { useState } from \"react\";\r\n\r\nconst Prealoader = () => {\r\n  const [readyToPlay, setReadyToPlay] = useState(false);\r\n\r\n  setTimeout(() => setReadyToPlay(true), 7000);\r\n\r\n  return (\r\n    <>\r\n      {readyToPlay ? null : (\r\n        <div className=\"Prealoader\">\r\n          <div className=\"content\">\r\n            <img src=\"images/mobile-icon.png\" className=\"logo\" alt=\"horse\" />\r\n            <p className=\"author\">\r\n              Author: <em>Alexander Vashchuk</em>\r\n            </p>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Prealoader;\r\n","import React from \"react\";\r\n\r\nconst RescueWindow = ({\r\n  turn,\r\n  whitesDead,\r\n  blacksDead,\r\n  selectedFigure,\r\n  onClick\r\n}) => (\r\n  <div className=\"RescueWindow\">\r\n    <div className=\"content\">\r\n      <h1>Pick up a figure to rescue:</h1>\r\n      <div className=\"list-of-figures\">\r\n        {turn === \"white\" ? (\r\n          <>\r\n            {whitesDead.map((figure, index) => (\r\n              <section\r\n                key={index}\r\n                onClick={() =>\r\n                  onClick(selectedFigure.x, selectedFigure.y, figure)\r\n                }\r\n              >\r\n                <img\r\n                  title=\"Rescue this figure\"\r\n                  src={`images/${figure}.png`}\r\n                  alt=\"figure\"\r\n                />\r\n              </section>\r\n            ))}\r\n          </>\r\n        ) : (\r\n          <>\r\n            {blacksDead.map((figure, index) => (\r\n              <section\r\n                key={index}\r\n                onClick={() =>\r\n                  onClick(selectedFigure.x, selectedFigure.y, figure)\r\n                }\r\n              >\r\n                <img\r\n                  title=\"Rescue this figure\"\r\n                  src={`images/${figure}.png`}\r\n                  alt=\"figure\"\r\n                />\r\n              </section>\r\n            ))}\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default RescueWindow;\r\n","import React from \"react\";\r\n\r\nconst EndGame = ({ winner, playAgain }) => (\r\n  <div className=\"End-Game\">\r\n    <div className=\"content\">\r\n      <div className=\"end-game-text\">\r\n        {winner} Team Won:\r\n        <p className=\"small\">click down bellow to play again</p>\r\n      </div>\r\n      <button onClick={() => playAgain()} className=\"play-again-button\">\r\n        Play Again\r\n      </button>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default EndGame;\r\n","import React, { Component } from \"react\";\nimport \"./scss/main.css\";\n\nimport ColumnLine from \"./components/ColumnLine\";\nimport Prealoader from \"./components/Prealoader\";\nimport RescueWindow from \"./components/RescueWindow\";\nimport EndGame from \"./components/EndGame\";\n\nclass App extends Component {\n  state = {\n    board: [],\n    turn: \"white\",\n    selectedFigure: { x: null, y: null },\n    winner: null,\n    showRescueWindow: false,\n    whitesDead: [],\n    blacksDead: []\n  };\n\n  wipeTheBoard() {\n    let { board } = this.state;\n\n    board.map(column => column.map(row => (row.figure = \"\")));\n\n    this.setState({ board });\n  }\n\n  initBoard() {\n    // Initialization of the board\n    let { board } = this.state;\n    for (let x = 0; x < 8; x++) {\n      let row = [];\n      for (let y = 0; y < 8; y++) {\n        let index = x * 8 + y;\n        let bg = (x + y) % 2 ? \"#333\" : \"white\";\n        row.push({ x, y, index, bg, figure: \"\", highlighted: false });\n      }\n      board.push(row);\n    }\n    this.setState({ board });\n  }\n\n  initFigures() {\n    // Initialization of the figures\n    let { board } = this.state;\n    let figures = [\n      \"rock\",\n      \"horse\",\n      \"bishop\",\n      \"queen\",\n      \"king\",\n      \"bishop\",\n      \"horse\",\n      \"rock\"\n    ];\n    figures.forEach((figure, index) => {\n      board[index][1].figure = \"pawn-black\";\n      board[index][6].figure = \"pawn-white\";\n      board[index][0].figure = figure + \"-black\";\n      board[index][7].figure = figure + \"-white\";\n    });\n    this.setState({ board });\n  }\n\n  componentWillMount = () => {\n    this.initBoard();\n    this.initFigures();\n  };\n\n  clearTable() {\n    let { board } = this.state;\n    board.map(columns => columns.map(cell => (cell.highlighted = false)));\n    this.setState({ board });\n  }\n\n  doesCellExist(x, y) {\n    if (x >= 0 && x <= 7 && y >= 0 && y <= 7) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  doesCellEmpty(x, y) {\n    const { board } = this.state;\n    if (this.doesCellExist(x, y)) {\n      if (board[x][y].figure === \"\") {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return false;\n    }\n  }\n\n  doesEnemyAtCell(x, y) {\n    const { board, turn } = this.state;\n    if (this.doesCellExist(x, y) && !this.doesCellEmpty(x, y)) {\n      if (board[x][y].figure.indexOf(turn) <= 0) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return false;\n    }\n  }\n\n  pawnWhite(x, y) {\n    let { board } = this.state;\n\n    if (this.doesCellEmpty(x, y - 1)) {\n      board[x][y - 1].highlighted = true;\n      if (y === 6 && this.doesCellEmpty(x, y - 2)) {\n        board[x][y - 2].highlighted = true;\n      }\n    }\n    if (this.doesEnemyAtCell(x - 1, y - 1)) {\n      board[x - 1][y - 1].highlighted = true;\n    }\n    if (this.doesEnemyAtCell(x + 1, y - 1)) {\n      board[x + 1][y - 1].highlighted = true;\n    }\n\n    this.setState({ board });\n  }\n  pawnBlack(x, y) {\n    let { board } = this.state;\n\n    if (this.doesCellEmpty(x, y + 1)) {\n      board[x][y + 1].highlighted = true;\n      if (y === 1 && this.doesCellEmpty(x, y + 2)) {\n        board[x][y + 2].highlighted = true;\n      }\n    }\n    if (this.doesEnemyAtCell(x - 1, y + 1)) {\n      board[x - 1][y + 1].highlighted = true;\n    }\n    if (this.doesEnemyAtCell(x + 1, y + 1)) {\n      board[x + 1][y + 1].highlighted = true;\n    }\n\n    this.setState({ board });\n  }\n  rock(x, y) {\n    const { board } = this.state;\n\n    let i;\n\n    // Move To Top\n    i = 1;\n    while (i <= 7) {\n      if (this.doesCellEmpty(x, y - i)) {\n        board[x][y - i].highlighted = true;\n      } else if (this.doesEnemyAtCell(x, y - i)) {\n        board[x][y - i].highlighted = true;\n        break;\n      } else {\n        break;\n      }\n      i++;\n    }\n\n    // Move To Bottom\n    i = 1;\n    while (i <= 7) {\n      if (this.doesCellEmpty(x, y + i)) {\n        board[x][y + i].highlighted = true;\n      } else if (this.doesEnemyAtCell(x, y + i)) {\n        board[x][y + i].highlighted = true;\n        break;\n      } else {\n        break;\n      }\n      i++;\n    }\n\n    // Move To Left\n    i = 1;\n    while (i <= 7) {\n      if (this.doesCellEmpty(x - i, y)) {\n        board[x - i][y].highlighted = true;\n      } else if (this.doesEnemyAtCell(x - i, y)) {\n        board[x - i][y].highlighted = true;\n        break;\n      } else {\n        break;\n      }\n      i++;\n    }\n\n    // Move To Rigth\n    i = 1;\n    while (i <= 7) {\n      if (this.doesCellEmpty(x + i, y)) {\n        board[x + i][y].highlighted = true;\n      } else if (this.doesEnemyAtCell(x + i, y)) {\n        board[x + i][y].highlighted = true;\n        break;\n      } else {\n        break;\n      }\n      i++;\n    }\n\n    this.setState({ board });\n  }\n  horse(x, y) {\n    const { board } = this.state;\n    const values = [\n      { x: x - 2, y: y - 1 },\n      { x: x + 2, y: y - 1 },\n      { x: x - 2, y: y + 1 },\n      { x: x + 2, y: y + 1 },\n      { x: x - 1, y: y - 2 },\n      { x: x + 1, y: y - 2 },\n      { x: x - 1, y: y + 2 },\n      { x: x + 1, y: y + 2 }\n    ];\n\n    values.forEach(value => {\n      if (\n        this.doesCellEmpty(value.x, value.y) ||\n        this.doesEnemyAtCell(value.x, value.y)\n      ) {\n        board[value.x][value.y].highlighted = true;\n      }\n    });\n    this.setState({ board });\n  }\n  bishop(x, y) {\n    const { board } = this.state;\n\n    let i;\n\n    // Move To Top Left\n    i = 1;\n    while (i <= 7) {\n      if (this.doesCellEmpty(x - i, y - i)) {\n        board[x - i][y - i].highlighted = true;\n      } else if (this.doesEnemyAtCell(x - i, y - i)) {\n        board[x - i][y - i].highlighted = true;\n        break;\n      } else {\n        break;\n      }\n      i++;\n    }\n\n    // Move To Top Right\n    i = 1;\n    while (i <= 7) {\n      if (this.doesCellEmpty(x + i, y - i)) {\n        board[x + i][y - i].highlighted = true;\n      } else if (this.doesEnemyAtCell(x + i, y - i)) {\n        board[x + i][y - i].highlighted = true;\n        break;\n      } else {\n        break;\n      }\n      i++;\n    }\n\n    // Move To Bottom Left\n    i = 1;\n    while (i <= 7) {\n      if (this.doesCellEmpty(x - i, y + i)) {\n        board[x - i][y + i].highlighted = true;\n      } else if (this.doesEnemyAtCell(x - i, y + i)) {\n        board[x - i][y + i].highlighted = true;\n        break;\n      } else {\n        break;\n      }\n      i++;\n    }\n\n    // Move To Bottom Right\n    i = 1;\n    while (i <= 7) {\n      if (this.doesCellEmpty(x + i, y + i)) {\n        board[x + i][y + i].highlighted = true;\n      } else if (this.doesEnemyAtCell(x + i, y + i)) {\n        board[x + i][y + i].highlighted = true;\n        break;\n      } else {\n        break;\n      }\n      i++;\n    }\n\n    this.setState({ board });\n  }\n  queen(x, y) {\n    this.rock(x, y);\n    this.bishop(x, y);\n  }\n  king(x, y) {\n    let { board } = this.state;\n\n    const values = [\n      { x: x - 1, y: y - 1 },\n      { x: x, y: y - 1 },\n      { x: x + 1, y: y - 1 },\n      { x: x + 1, y: y },\n      { x: x + 1, y: y + 1 },\n      { x: x, y: y + 1 },\n      { x: x - 1, y: y + 1 },\n      { x: x - 1, y: y }\n    ];\n\n    values.forEach(value => {\n      if (\n        this.doesCellEmpty(value.x, value.y) ||\n        this.doesEnemyAtCell(value.x, value.y)\n      ) {\n        board[value.x][value.y].highlighted = true;\n      }\n    });\n\n    this.setState({ board });\n  }\n\n  selectCell = (x, y, figure) => {\n    let { board, selectedFigure, turn, whitesDead, blacksDead } = this.state;\n    if (figure && figure.indexOf(turn) >= 0) {\n      selectedFigure.x = x;\n      selectedFigure.y = y;\n      this.clearTable();\n      this.setState({ selectedFigure });\n      if (figure.indexOf(\"pawn-black\") >= 0) {\n        this.pawnBlack(x, y);\n      }\n      if (figure.indexOf(\"pawn-white\") >= 0) {\n        this.pawnWhite(x, y);\n      }\n      if (figure.indexOf(\"rock\") >= 0) {\n        this.rock(x, y);\n      }\n      if (figure.indexOf(\"horse\") >= 0) {\n        this.horse(x, y);\n      }\n      if (figure.indexOf(\"bishop\") >= 0) {\n        this.bishop(x, y);\n      }\n      if (figure.indexOf(\"queen\") >= 0) {\n        this.queen(x, y);\n      }\n      if (figure.indexOf(\"king\") >= 0) {\n        this.king(x, y);\n      }\n    }\n    // Clicked cell\n    if (board[x][y].highlighted) {\n      if (board[x][y].figure !== \"\") {\n        if (board[x][y].figure.indexOf(\"pawn\") !== 0) {\n          let { whitesDead, blacksDead } = this.state;\n          let victim = board[x][y].figure;\n          if (board[x][y].figure.indexOf(\"white\") >= 0) {\n            whitesDead.push(victim);\n            this.setState({ whitesDead });\n          } else {\n            blacksDead.push(victim);\n            this.setState({ blacksDead });\n          }\n        }\n      }\n\n      if (board[x][y].figure === \"king-black\") {\n        alert(\"The White Won\");\n        this.setState({ winner: \"White\" });\n      }\n      if (board[x][y].figure === \"king-white\") {\n        alert(\"The Black Won\");\n        this.setState({ winner: \"Black\" });\n      }\n      turn = turn === \"white\" ? \"black\" : \"white\"; // change turn after the move\n      board[x][y].figure = board[selectedFigure.x][selectedFigure.y].figure;\n      board[selectedFigure.x][selectedFigure.y].figure = \"\";\n\n      // White pawn reached the end of the board\n      if (\n        board[x][y].figure.indexOf(\"pawn-white\") >= 0 &&\n        board[x][y].y === 0 &&\n        whitesDead.length > 0\n      ) {\n        this.setState({ showRescueWindow: true, selectedFigure: { x, y } });\n        this.clearTable();\n        return;\n      }\n\n      // Black pawn reached the end of the board\n      if (\n        board[x][y].figure.indexOf(\"pawn-black\") >= 0 &&\n        board[x][y].y === 7 &&\n        blacksDead.length > 0\n      ) {\n        this.setState({ showRescueWindow: true, selectedFigure: { x, y } });\n        this.clearTable();\n        return;\n      }\n\n      this.clearTable();\n      this.setState({ turn, board, selectedFigure: { x: null, y: null } });\n    }\n  };\n\n  playAgain = () => {\n    this.wipeTheBoard();\n    this.initFigures();\n    this.setState({\n      winner: null,\n      turn: \"white\",\n      whitesDead: [],\n      blacksDead: []\n    });\n  };\n\n  rescueFigure = (x, y, figure) => {\n    let { board, selectedFigure, turn, whitesDead, blacksDead } = this.state;\n\n    board[selectedFigure.x][selectedFigure.y].figure = figure;\n\n    // Removing the figure from the dead list after the rescuing\n    if (turn === \"white\") {\n      whitesDead.splice(whitesDead.indexOf(figure), 1);\n    } else {\n      blacksDead.splice(blacksDead.indexOf(figure), 1);\n    }\n\n    turn = turn === \"white\" ? \"black\" : \"white\"; // change turn after the rescuing\n\n    this.setState({\n      showRescueWindow: false,\n      board,\n      selectedFigure: { x: null, y: null },\n      turn,\n      whitesDead,\n      blacksDead\n    });\n  };\n\n  render() {\n    let {\n      turn,\n      board,\n      selectedFigure,\n      winner,\n      showRescueWindow,\n      whitesDead,\n      blacksDead\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        <Prealoader />\n        {showRescueWindow ? (\n          <RescueWindow\n            turn={turn}\n            whitesDead={whitesDead}\n            blacksDead={blacksDead}\n            onClick={this.rescueFigure}\n            selectedFigure={selectedFigure}\n          />\n        ) : null}\n        {winner ? <EndGame winner={winner} playAgain={this.playAgain} /> : null}\n        <div className=\"grid\">\n          {board.map((column, columnIndex) => (\n            <ColumnLine\n              key={columnIndex}\n              column={column}\n              selectedFigure={selectedFigure}\n              onClick={this.selectCell}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}